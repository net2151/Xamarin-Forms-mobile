@page "/"
@inject IAuthorService authorService;
@inject IJSRuntime JSRuntime;
@inject HttpClient Http;
@implements IDisposable;
@using BlazorApp.Data;


<div class="col-12">
    <h3><b>Enter Author Information</b></h3>
    <hr />
    
    <ServerValidations IsVisible="IsVisible" Result="Result">
        @RecordName
    </ServerValidations>

    <EditForm Model="@author" OnValidSubmit="@SaveAuthor">
        @*<DataAnnotationsValidator />*@

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">first name :</label>
            <input @ref="firstNameTextBox" class="form-control col-3" @bind="author.FirstName" placeholder="first name" />
            &nbsp;<ValidationMessage For="@(() => author.FirstName)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">last name :</label>
            <InputText class="form-control col-3" @bind-Value="author.LastName" placeholder="last name" />
            &nbsp;<ValidationMessage For="@(() => author.LastName)" />
        </div>
        <br />
        @*<div class="col-12 row">
            <label class="col-2 font-weight-bold">city :</label>
            <select @bind="author.City" class="form-control col-3">
                @if (@Cities != null)
                {
                    <option value="">select city..</option>
                    @foreach (var city in Cities)
                    {
                        <option value="@city">@city</option>
                    }
                }
            </select>
            <SelectCity></SelectCity>

            <InputText class="form-control col-3" @bind-Value="author.City" placeholder="city" />
            &nbsp;<ValidationMessage For="@(() => author.City)" />
        </div>
        <br />*@
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">email address :</label>
            <InputText class="form-control col-3" @bind-Value="author.EmailAddress" placeholder="email address" />
            &nbsp;<ValidationMessage For="@(() => author.EmailAddress)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">salary :</label>
            <InputNumber class="form-control col-3" @bind-Value="author.Salary" />
            &nbsp;<ValidationMessage For="@(() => author.Salary)" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
            <span>&nbsp;</span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Clear" />
        </div>

    </EditForm>

</div>

<br />

<div class="col-10">

    <h3><b>Authors</b></h3>

    <table class="table">
        <thead>
            <tr>
                <th>AuthorId</th>
                <th>First Name</th>
                <th>Last Name</th>
                @*<th>City</th>*@
                <th>Email Address</th>
                @*<th>Salary</th>*@
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var author in authorList)
            {
            <tr>
                <td>
                    <NavLink href=@string.Format("/authors/authordetail/{0}",@author.AuthorId)>
                        @author.AuthorId
                    </NavLink>
                </td>
                <td>@author.FirstName</td>
                <td>@author.LastName</td>
                @*<td>@author.City</td>*@
                <td>@author.EmailAddress</td>
                @*<td>$@author.Salary</td>*@
                <td><a style="text-underline-position:below; cursor:pointer; color:blue; font-weight:bold"
                        @onclick="(() => EditAuthor(author))">Edit</a> | 
                    <a style="text-underline-position:below; cursor:pointer; color:blue; font-weight:bold"
                       @onclick ="(() => DeleteAuthor(author.AuthorId))">Delete</a>
                </td>
            </tr>
            }
        </tbody>
    </table>
</div>

@code {

    public Author author { get; set; }
    public List<Author> authorList { get; set; }


    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public string[] Cities { get; set; }

    ElementReference firstNameTextBox;

    protected override void OnInitialized()
    {
        Console.WriteLine("Authors - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Authors - OnInitializedAsync");

        author = new Author();
        //authorList = await authorService.GetAuthors();

        authorList = new List<Author>();
        authorList = await Http.GetJsonAsync<List<Author>>("https://localhost:44394/api/authors");
        authorList = authorList.OrderByDescending(auth => auth.AuthorId).ToList();

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Authors - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Authors - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        //if (firstRender && Cities == null)
        //{
        //    Cities = await JSRuntime.InvokeAsync<string[]>("getCities");

        //    StateHasChanged();
        //}

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("Authors - ShouldRender");
        return base.ShouldRender();
    }

    public void Dispose()
    {
        Console.WriteLine("Authors - Dispose");
    }

    private async Task LoadAuthors()
    {
        authorList = await Http.GetJsonAsync<List<Author>>("https://localhost:44394/api/authors");
        authorList = authorList.OrderByDescending(auth => auth.AuthorId).ToList();

        StateHasChanged();

    }

    private async Task SaveAuthor()
    {
        //Result = await authorService.SaveAuthor(author);
        if(author.AuthorId == 0)
            await Http.PostJsonAsync("https://localhost:44394/api/authors", author);
        else
            await Http.PutJsonAsync("https://localhost:44394/api/authors/" + author.AuthorId, author);

        await LoadAuthors();

        Result = true;
        IsVisible = true;

        var firstName = author.FirstName;
        var lastName = author.LastName;

        RecordName = firstName + " " + lastName;

        author = new Author();

        //await JSRuntime.InvokeVoidAsync("saveMessage", firstName, lastName);
        //await JSRuntime.InvokeVoidAsync("setFocusOnElement", firstNameTextBox);
    }

    private async Task DeleteAuthor(int authorId)
    {
        await Http.DeleteAsync("https://localhost:44394/api/authors/" + authorId);

        await LoadAuthors();
    }

    private void EditAuthor(Author argAuthor)
    {
        author = argAuthor;
    }
}
