@model CuriousDriveWebClient.CreateUserGroupViewModel;


@{
    ViewBag.Title = "User Group - Curious Drive";
}

<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.10.0.min.js" type="text/javascript"></script>
<script src="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/jquery-ui.min.js" type="text/javascript"></script>

<link href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/themes/blitzer/jquery-ui.css" rel="Stylesheet" type="text/css" />

<script type="text/javascript">

    var counterUsers = 0;
    var users = [];

    onLoad();

    function removeUser(userId) {

        for (incrementer = 0; incrementer < users.length; incrementer++) {
            var fields = users[incrementer].split('#')
            if (fields[1] == userId) {

                var div = document.getElementById("div" + userId)
                div.parentNode.removeChild(div);
                users.splice(incrementer, 1);

                var txtUserIdText = document.getElementById('txtUserIds').value;
                txtUserIdText = txtUserIdText.replace(userId, '');
                document.getElementById('txtUserIds').value = txtUserIdText;
            }
        }
    }

    function onLoad() {

        var str = window.location.href.split("=");

        $.ajax({
            url : '@Url.Action("GetUserGroupUsers", "Admin")',
            data: "{ 'aintUserGroupId': '" + str[1] + "'}",
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            success: function (llstUserGroupDetail) {

                for (var i = 0; i < llstUserGroupDetail.length; i++) {

                    addGridRow(llstUserGroupDetail[i].iUser.idoUser.displayName, llstUserGroupDetail[i].idoUserGroupDetail.userId)
                }

            },
            error: function (response) {
                //alert(response.responseText);
            },
            failure: function (response) {
                //alert(response.responseText);
            }
        });
    }

    function addGridRow(displayName, userId) {

        var lblExists = false;

        for (incrementer = 0; incrementer < users.length; incrementer++) {
            if (users[incrementer] == displayName + '#' + userId)
                lblExists = true;
        }

        if (!lblExists) {
            var usersGroup = $('#divUsers');
            usersGroup.append('<div class="col-lg-8 col-sm-12 col-12 row" id ="div' + userId + '"><div class="col-lg-8 col-sm-9 col-9 bold-large">' + displayName + '</div><div class="col-lg-4 col-lg-4 sm-3 col-3"> <a onclick="removeUser(' + userId + ')">  remove  </a></div></div>');

            users.push(displayName + '#' + userId);
            counterUsers++;

            var txtUserIds = $('#txtUserIds').val();
            if (txtUserIds != '')
                $('#txtUserIds').val(txtUserIds + ',' + userId);
            else
                $('#txtUserIds').val(userId);
        }

    }

    $(function () {

            $("#txtUsers").autocomplete({

                source: function (request, response) {
                    $.ajax({
                        url : '@Url.Action("AutoCompleteUsers", "Admin")',
                        data: "{ 'prefix': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {

                    var lblExists = false;

                    addGridRow(i.item.label, i.item.val)

                    this.value = '';
                    return false;
                },
                minLength: 0
            });
    });

</script>

@using (Html.BeginForm("CreateUserGroup", "Admin", FormMethod.Post, new { @class = "form-horizontal row card", role = "form" }))
{
    @Html.AntiForgeryToken()   

    <form name="createUserGroupForm" class="form-horizontal form-group" role="form" novalidate>

        <div class="col-lg-12 col-12">
            <br />
        </div>

        <div class="col-lg-12 col-12">
            <p class="bold-largest">Create a User Group</p>
            <p>
                User groups could be tagged in questions and announcements. It's the best way to notify a group of users.
                <br />
                Please enter group name and group descrption. You can select users to the group from 'add users' textbox.
            </p>
            <hr />
        </div>

        <div class="col-lg-12 col-sm-12 col-12">
            @Html.TextBoxFor(m => m.groupName, new { @class = "form-control", placeholder = "user group name" })
            <br />
        </div>
        <div class="col-lg-12 col-sm-12 col-12">
            @Html.TextAreaFor(m => m.groupDescription, new { @class = "form-control", placeholder = "group description" })
            <br />
        </div>
        <div class="col-lg-4 col-sm-8 col-8">
            <input class="form-control" placeholder="add users" type="text" id="txtUsers" name="" />
        </div>

        <div id="usersGroup"></div>

        <div class="col-lg-12 col-sm-12 col-12">
            <br />
        </div>

        <div class="col-lg-12">
            <div id="divUsers" class="col-lg-12 col-sm-12 col-12 grid">
                <div class="col-lg-8 col-sm-12 col-12 grid_header row">
                    <div class="col-lg-8 col-sm-9 col-9">
                        Name
                    </div>
                    <div class="col-lg-4 col-sm-3 col-3">
                        Action
                    </div>
                </div>

                <input type="text" id="txtUserIds" name="txtUserIds" hidden />

            </div>
        </div>

        <div class="col-lg-12 col-sm-12 col-12">
            <br />
        </div>

        <div class="col-lg-12 col-sm-12 col-12">
            <button id="submitClass" class="btn btn-primary" type="submit">Submit</button>
        </div>

        <div class="col-lg-12 col-sm-12 col-12">
            <br />
        </div>

    </form>

}