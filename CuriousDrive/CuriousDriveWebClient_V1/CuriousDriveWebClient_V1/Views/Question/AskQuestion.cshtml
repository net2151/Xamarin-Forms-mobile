@model CuriousDriveWebClient.AskQuestionViewModel;

@{
    ViewBag.Title = "Ask Question - Curious Drive";
}


<script src="~/Scripts/tinymce/tinymce.min.js"></script>

<link href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/themes/blitzer/jquery-ui.css" rel="Stylesheet" type="text/css" />

<script type="text/javascript">

    var counterClasses = 0;
    var counterUsers = 0;
    var classes = [];
    var users = [];

    function removeClass(classId) {

        for (incrementer = 0; incrementer < classes.length; incrementer++) {
            var fields = classes[incrementer].split('#')
            if (fields[1] == classId)
            {
                document.getElementById('rowClasses').removeChild(document.getElementById("td" + classId));
                classes.splice(incrementer, 1);

                var txtClassIdText = document.getElementById('txtClassIds').value;
                txtClassIdText = txtClassIdText.replace(classId, '');
                document.getElementById('txtClassIds').value = txtClassIdText;
            }
        }
    }

    function removeUser(userId) {

        for (incrementer = 0; incrementer < users.length; incrementer++) {
            var fields = users[incrementer].split('#')
            if (fields[1] == userId) {
                document.getElementById('rowUsers').removeChild(document.getElementById("td" + userId));
                users.splice(incrementer, 1);

                var txtUserIdText = document.getElementById('txtUserTags').value;
                txtUserIdText = txtUserIdText.replace(userId, '');
                document.getElementById('txtUserTags').value = txtUserIdText;
            }
        }
    }

    function selectDropdownClasses(selectedObject) {

        var value = selectedObject.options[selectedObject.selectedIndex].innerText;
        var id = selectedObject.value;

        if (value == 'tag classes')
            return;

        var lblExists = false;

        for (incrementer = 0; incrementer < classes.length; incrementer++) {
            if (classes[incrementer] == value + '#' + id)
                lblExists = true;
        }

        if (!lblExists) {
            var classesGroup = $('#rowClasses');
            classesGroup.append('<td id ="td' + id + '" style="background-color:cyan">&nbsp; <label>' + value + '</label> '
                + '<input type="button" name="btn' + counterClasses + '" id="btn' + counterClasses + '" value ="x" onclick="removeClass(' + id + ')"></td> <td>&nbsp;</td>');

            classes.push(value + '#' + id);
            counterClasses++;

            var txtClassIds = $('#txtClassIds').val();
            if (txtClassIds != '')
                $('#txtClassIds').val(txtClassIds + ',' + id);
            else
                $('#txtClassIds').val(id);
        }

        this.value = '';
        return false;
    }    

    $(function () {

            $("#txtUsers").autocomplete({

                source: 'AutoCompleteUsers/',
                select: function (e, i) {
                    var lblExists = false;

                    for (incrementer = 0; incrementer < users.length; incrementer++) {
                        if (users[incrementer] == i.item.label + '#' + i.item.val)
                            lblExists = true;
                    }

                    if (!lblExists)
                    {
                        var usersGroup = $('#rowUsers');
                        usersGroup.append('<td id ="td' + i.item.val + '" style="background-color:cyan">&nbsp; <label>' + i.item.label + '</label> '
                            + '<input type="button" value ="x" onclick=removeUser("'+ i.item.val +'")></td> <td>&nbsp;</td>');

                        users.push(i.item.label + '#' + i.item.val);
                        counterUsers++;

                        var txtUserTags = $('#txtUserTags').val();
                        if (txtUserTags != '')
                            $('#txtUserTags').val(txtUserTags + ',' + i.item.val);
                        else
                            $('#txtUserTags').val(i.item.val);
                    }

                    this.value = '';
                    return false;
                },
                appendTo: '#divAutocompleteUsers',
                minLength: 0
            });
    });

    // Initialize your tinyMCE Editor with your preferred options
    tinymce.init({
        selector: 'textarea',
        menubar: false,
        branding: false,
        plugins: [
            'advlist autolink lists link image charmap print preview anchor textcolor',
            'searchreplace visualblocks code fullscreen',
            'insertdatetime media table contextmenu paste code wordcount'
        ],
        toolbar: 'insert | undo redo |  formatselect | bold italic backcolor  | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat',
        content_css: [
            '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
            '//www.tinymce.com/css/codepen.min.css']
    });

</script>

@using (Html.BeginForm("AskQuestion", "Question", FormMethod.Post, new { @class = "form-horizontal row card", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.questionId)
    @Html.HiddenFor(model => model.questionTitleURL)

    <form name="askQuestionForm" class="form-horizontal" role="form" novalidate>

        <div class="form-group col-lg-12 col-12">
            <div class="col-lg-12 col-12">
                <br />
            </div>

            <div class="col-lg-12 col-12">
                <p class="bold-largest">Ask a Question</p>
                <p>
                    You can ask questions to your peers, teachers and user groups. Good questions are voted up and rise to the top in the community.
                </p>
                <hr />
            </div>

            <div class="col-lg-12">
                @Html.TextBoxFor(m => m.questionTitle, new { placeholder = "question title", @class = "form-control" })
                <br />
            </div>

            <div class="col-lg-12">
                @Html.TextAreaFor(m => m.questionHtml, new { @class = "form-control col-sm-16" })
                <br />
            </div>

            @*<div class="col-lg-4">
            <input class="form-control" placeholder="mention the class" type="text" id="txtClasses" name="" />
        </div>*@

            <div class="col-lg-12 col-lg-12 col-sm-12 col-12">

                @Html.DropDownListFor(m => m.selectedClass,
                                            Model.classesViewModel.Select(x => new SelectListItem
                                            {
                                                Text = x.className,
                                                Value = Convert.ToString(x.classId)
                                                 }),
                                                "tag classes",
                                                new
                                                     {
                                                         @class = "form-control",
                                                         @id = "dropdownClass",
                                                         @onchange = "selectDropdownClasses(this)"
                                                })
            </div>

            <div class="col-lg-12">
                <br />
                <div id="classesGroup"></div>
                <table id="tblClasses">
                    <tr id="rowClasses"></tr>
                </table>
                <input type="text" id="txtClassIds" name="txtClassIds" hidden />
            </div>

            <div class="col-lg-12 col-lg-12 col-sm-12 col-12">
                <br />
            </div>

            <div class="col-lg-4">
                <input class="form-control" placeholder="tag users" type="text" id="txtUsers" name="" />
                <div id="divAutocompleteUsers" class="col-lg-4">

                </div>
            </div>            

            <div class="col-lg-12">
                <br />
                <div id="usersGroup"></div>
                <table id="tblUsers">
                    <tr id="rowUsers"></tr>
                </table>
                <input type="text" id="txtUserTags" name="txtUserTags" hidden />
            </div>

            <div class="col-lg-12 col-lg-12 col-sm-12 col-12">
                <br />
            </div>

            <div class="col-lg-12">
                @if (Model == null)
                {
                    <button id="submitQuestion" class="btn btn-primary" type="submit" name="submitType" value="PostQuestion">Post Question</button>
                }
                else if (Model != null && Model.questionId == 0)
                {
                    <button id="submitQuestion" class="btn btn-primary" type="submit" name="submitType" value="PostQuestion">Post Question</button>
                }
                else if (Model.questionId > 0)
                {
                    <button id="updateQuestion" class="btn btn-primary" type="submit" name="submitType" value="UpdateQuestion">Update</button>
                    <button id="cancelUpdateQuestion" class="btn btn-primary" type="submit" name="submitType" value="CancelUpdateQuestion">Cancel</button>
                }
            </div>
            <div class="col-lg-12 col-12">
                <br />
            </div>
        </div>
        <div class="col-lg-3"></div>
    </form>

}